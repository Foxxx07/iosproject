DROP PROCEDURE IF EXISTS `imap_contacts`.`GetUserByCredentials`;

DELIMITER |

CREATE DEFINER = `imap_contacts` PROCEDURE `imap_contacts`.`GetUserByCredentials` (IN u_email VARBINARY(254), IN u_password BINARY(32))
LANGUAGE SQL
DETERMINISTIC
READS SQL DATA
SQL SECURITY DEFINER
COMMENT 'Test les informations d\'identification'
BEGIN
	DECLARE STORED_KEY			BINARY(4)	DEFAULT NULL;
	-- DECLARE STORED_PASSWORD	BINARY(32)	DEFAULT NULL;
	DECLARE IS_OK				BOOLEAN		DEFAULT FALSE;

	-- DECLARE CURR_SELECT_PASSWORD	CURSOR FOR SELECT `key`, `password` FROM `users` WHERE `email` = u_email;
	DECLARE CURR_SELECT_PASSWORD	CURSOR FOR SELECT `key`, `password` <=> u_password FROM `users` WHERE `email` = u_email;

	IF RPAD(0x00, 254, 0x00) <=> u_email THEN
		SIGNAL SQLSTATE VALUE '45000' SET MYSQL_ERRNO = 10002, MESSAGE_TEXT = 'User email cannot be empty';
	ELSEIF RPAD(0x00, 32, 0x00) <=> u_password THEN
		SIGNAL SQLSTATE VALUE '45000' SET MYSQL_ERRNO = 10003, MESSAGE_TEXT = 'User password cannot be empty';
	ELSE
		OPEN	CURR_SELECT_PASSWORD;
		-- FETCH	CURR_SELECT_PASSWORD INTO STORED_KEY, STORED_PASSWORD;
		FETCH	CURR_SELECT_PASSWORD INTO STORED_KEY, IS_OK;
		CLOSE	CURR_SELECT_PASSWORD;

		IF STORED_KEY IS NOT NULL THEN
			-- IF STORED_PASSWORD IS NOT NULL THEN
			IF IS_OK IS TRUE THEN
				-- IF STORED_PASSWORD <=> u_password THEN
					CALL GetUserById(STORED_KEY);
				-- END IF;
			END IF;
		END IF;
	END IF;
END;
|

DELIMITER ;
