DROP PROCEDURE IF EXISTS `imap_contacts`.`SetFriendship`;

DELIMITER |

CREATE DEFINER = `imap_contacts` PROCEDURE `imap_contacts`.`SetFriendship` (IN r_key BINARY(64), IN u_key_a BINARY(4), IN u_key_b BINARY(4))
LANGUAGE SQL
NOT DETERMINISTIC
MODIFIES SQL DATA
SQL SECURITY DEFINER
COMMENT 'Ajoute/accepte une demande d\'ami'
BEGIN
	DECLARE STORED_R_KEY	BINARY(64)	DEFAULT NULL;
	DECLARE STORED_STATE	BIT(1)		DEFAULT NULL;
	DECLARE IS_A_TO_B		BOOLEAN		DEFAULT FALSE;

	DECLARE CURR_SELECT_RELATION_KEY CURSOR FOR SELECT `relation_key`, `state`, `user_a` = u_key_a FROM `friends` WHERE (`user_a` = u_key_a AND `user_b` = u_key_b) OR (`user_a` = u_key_b AND `user_b` = u_key_a);

	DECLARE EXIT HANDLER FOR NOT FOUND
		BEGIN
			IF r_key IS NOT NULL THEN
				INSERT INTO `friends` VALUE (r_key, u_key_a, u_key_b, b'0');
			ELSE
				SIGNAL SQLSTATE VALUE '45000' SET MYSQL_ERRNO = 10006, MESSAGE_TEXT = 'Wrong relation key';
			END IF;
		END;

	IF u_key_a <=> u_key_b THEN
		SIGNAL SQLSTATE VALUE '45000' SET MYSQL_ERRNO = 10004, MESSAGE_TEXT = 'User keys are the same';
	ELSEIF u_key_a IS NULL THEN
		SIGNAL SQLSTATE VALUE '45000' SET MYSQL_ERRNO = 10005, MESSAGE_TEXT = 'Wrong user key';
	ELSEIF u_key_b IS NULL THEN
		SIGNAL SQLSTATE VALUE '45000' SET MYSQL_ERRNO = 10005, MESSAGE_TEXT = 'Wrong user key';
	ELSE
		OPEN	CURR_SELECT_RELATION_KEY;
		FETCH	CURR_SELECT_RELATION_KEY INTO STORED_R_KEY, STORED_STATE, IS_A_TO_B;
		CLOSE	CURR_SELECT_RELATION_KEY;

		IF STORED_R_KEY IS NOT NULL THEN
			IF IS_A_TO_B IS FALSE THEN
				IF STORED_STATE <=> b'0' THEN
					UPDATE `friends` SET `state` = b'1' WHERE `relation_key` = STORED_R_KEY;
				END IF;
			END IF;
		END IF;
	END IF;
END;
|

DELIMITER ;
